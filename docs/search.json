[
  {
    "objectID": "tutorials/Execution_time_in_R.html",
    "href": "tutorials/Execution_time_in_R.html",
    "title": "How to Compute Execution time in R",
    "section": "",
    "text": "# timed_pipeline.R\n\ncat(\"===== R Script Execution Started =====\\n\")\ncat(\"Start time:\", format(Sys.time()), \"\\n\\n\")\n\n# ----------- Helper Function to Time Each Block -----------\ntime_it &lt;- function(expr, label = \"\") {\n  time &lt;- system.time(result &lt;- eval(expr))\n  cat(sprintf(\"&gt;&gt;&gt; '%s' took %.3f seconds\\n\", label, time[\"elapsed\"]))\n  return(result)\n}\n\n# ----------- 1. Load or Generate Data -----------\nload_data &lt;- function(n = 1000000) {\n  set.seed(42)\n  data.frame(\n    id = 1:n,\n    feature1 = rnorm(n),\n    feature2 = runif(n),\n    target = sample(0:1, n, replace = TRUE)\n  )\n}\n\ncat(\"Step 1: Loading data...\\n\")\ndf &lt;- time_it(quote(load_data()), \"Load Data\")\n\n# ----------- 2. Preprocess Data -----------\npreprocess_data &lt;- function(data) {\n  data$feature1_scaled &lt;- scale(data$feature1)\n  data$feature2_scaled &lt;- scale(data$feature2)\n  data\n}\n\ncat(\"\\nStep 2: Preprocessing data...\\n\")\ndf_processed &lt;- time_it(quote(preprocess_data(df)), \"Preprocess Data\")\n\n# ----------- 3. Train a Simple Model -----------\ntrain_model &lt;- function(data) {\n  model &lt;- glm(target ~ feature1_scaled + feature2_scaled, data = data, family = \"binomial\")\n  return(model)\n}\n\ncat(\"\\nStep 3: Training model...\\n\")\nmodel &lt;- time_it(quote(train_model(df_processed)), \"Train Model\")\n\n# ----------- 4. Make Predictions -----------\npredict_model &lt;- function(model, data) {\n  probs &lt;- predict(model, newdata = data, type = \"response\")\n  data$predicted_class &lt;- ifelse(probs &gt; 0.5, 1, 0)\n  return(data)\n}\n\ncat(\"\\nStep 4: Making predictions...\\n\")\ndf_predicted &lt;- time_it(quote(predict_model(model, df_processed)), \"Predict\")\n\n# ----------- 5. Save Results -----------\nsave_results &lt;- function(data, path = \"output.csv\") {\n  write.csv(data, path, row.names = FALSE)\n}\n\ncat(\"\\nStep 5: Saving output to file...\\n\")\ntime_it(quote(save_results(df_predicted)), \"Save Output\")\n\ncat(\"\\n===== R Script Execution Completed =====\\n\")\ncat(\"End time:\", format(Sys.time()), \"\\n\")\n\n===== R Script Execution Started =====\nStart time: 2025-07-19 10:59:26 \n\nStep 1: Loading data...\n&gt;&gt;&gt; 'Load Data' took 0.046 seconds\n\nStep 2: Preprocessing data...\n&gt;&gt;&gt; 'Preprocess Data' took 0.094 seconds\n\nStep 3: Training model...\n&gt;&gt;&gt; 'Train Model' took 0.965 seconds\n\nStep 4: Making predictions...\n&gt;&gt;&gt; 'Predict' took 0.148 seconds\n\nStep 5: Saving output to file...\n&gt;&gt;&gt; 'Save Output' took 2.825 seconds\n\n\nNULL\n\n\n\n===== R Script Execution Completed =====\nEnd time: 2025-07-19 10:59:30"
  },
  {
    "objectID": "tutorials/Hello.html",
    "href": "tutorials/Hello.html",
    "title": "Data Science Blog",
    "section": "",
    "text": "# hello.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    message = greet(\"World\")\n    print(message)\n\nHello, World!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Senior Data Scientist\nHi, I‚Äôm Nivedita ‚Äî a Senior Data Scientist with a background in physics, computational modeling, and large-scale data systems. I‚Äôve worked extensively across healthcare, biotech, and research labs, blending data engineering with deep learning and statistical modeling.\nOn this blog, I share real-world tutorials, hands-on notebooks, and lessons I‚Äôve learned while solving data problems in production. My aim is to make complex topics digestible ‚Äî whether it‚Äôs Dask, NLP with Transformers, or robust ML pipelines."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "üéì Education",
    "text": "üéì Education\nPhD in Computational Physics\nIndian Institute of Science Education and Research (IISER), Kolkata, India\n2012 ‚Äì 2018\nM.Sc. in Physics\nIndian Institute of Technology (IIT), Delhi, India\n2009 ‚Äì 2011\nMaster of Engineering in Big Data Analytics\nArcada University of Applied Sciences, Finland\n2024 ‚Äì 2025\n\nüë©‚Äçüíª Areas I write about\n\nPython and R for data science\nMachine learning in production\nScalable data pipelines (Dask, Spark, SQL)\nNatural Language Processing\nWorking with biomedical and -omics data\nCareer advice for researchers moving into tech\n\n\n\nüí¨ Connect with Me\n\nGitHub: BNTechie\nLinkedIn: Nivedita Bhadra\nEmail: nivedita.home@gmail.com\n\n\nIf you‚Äôve found something helpful here, feel free to share it or reach out!"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Managing Relational Data in Python with SQLite and Pandas\nA tutorial on integrating pandas with SQLite to query, manage, and analyze structured relational data within Python workflows.\nScalable Data Processing with Dask\nTry Dask for large datasets: a flexible Python library for parallel and distributed computing, enabling scalable analysis with pandas-like syntax.\nRobust Regression (Against Outliers) Analysis in Python\nLearn how to use robust estimators like Huber Regressor to handle noisy data and outliers more effectively than standard linear regression.\nMarket Basket Analysis with Python A hands-on tutorial explaining association rule mining using the Apriori algorithm to find itemsets that frequently occur together in transactional data.\n5 Most Common Statistical Distributions Normal distribution and other common statistical concepts explained clearly.\nPublished on Jul 6, 2025 ¬∑ 7 min read\nUnderstand Decision Function in a Classification Model A beginner‚Äôs guide to decision functions using scikit-learn.\nPublished on Jul 5, 2025 ¬∑ 5 min read\nA Brief Introduction to Automated Machine Learning (AutoML) with an Example Quick AutoML demo with a working implementation.\nPublished on Jul 5, 2025 ¬∑ 4 min read\nAn Introduction to the Mixed Effect Model in R Beginner‚Äôs guide to building mixed effect models using R.\nPublished on Jul 4, 2025 ¬∑ 6 min read\nRegularized or Penalized Regression Models Lasso, Ridge, and ElasticNet explained with Python examples.\nPublished on Jul 4, 2025 ¬∑ 9 min read\nMeasuring Personalized Cancer Therapy Response: The Growth Modulation Index (GMI) Compute GMI using Python for personalized cancer therapy response.\nPublished on Apr 30, 2025 ¬∑ 4 min read\nUnderstanding Odds Ratio, Relative risk and Hit Ratio An odd ratio(OR) is a statistical measure of association between two events, for example, exposure and outcome. OR plays a crucial role in‚Ä¶\nSimpson‚Äôs Paradox Be aware of this common mistake in data analysis Published on Jan 7, 2025 ¬∑ 3 min read\nFalse Discovery Rate (FDR), adjusted p-value, and Q-values When you perform many hypothesis tests simultaneously, the chance of observing a false positive (rejecting a true null hypothesis)‚Ä¶ Published on Jan 5, 2025 ¬∑ 3 min read\nUnderstand p-value and confidence interval Understand p-value and confidence interval in an example Published on Jan 4, 2025 ¬∑ 7 min read\nComprehensive Guide to Multiple Testing Corrections Bonferroni, Holm-Bonferroni, FDR, Tukey HSD, and Permutation Tests Explained with Python Examples\nBuild an end-to-end Machine Learning project in Python\nMachine learning has become an integral part of modern software solutions, enabling intelligent features and data-driven decision-making.\nPublished on Jul 31, 2024 ¬∑ 5 min read ¬∑ In Towards Dev\nAnalysing stock data in Python\nA step-by-step guide to understanding time series and applying forecasting methods on Yahoo finance dataset.\nPublished on Sep 5, 2024 ¬∑ 15 min read ¬∑ In Towards Dev\nTopic modeling with Python: An NLP project\nExplore your text data with Python.\nPublished on Aug 23, 2024 ¬∑ 15 min read ¬∑ In Python in Plain English\nOutlier detection and removal in Python\nA beginner‚Äôs guide to outlier detection in static and time-series dataset.\nPublished on Aug 15, 2024 ¬∑ 11 min read ¬∑ In Learning Data\nPlotting data in Python\nA step-by-step guide to exploring data visualization techniques in Python.\nPublished on Aug 9, 2024 ¬∑ 7 min read ¬∑ In Python in Plain English\nDimensionality Reduction using R\nUnderstanding dimensionality reduction technique with an example dataset.\nPublished on Aug 7, 2024 ¬∑ 7 min read ¬∑ In Towards Dev\nA Comprehensive Guide to A/B Testing in Python\nImplementing A/B Testing in an Email Campaign Using Python.\nPublished on Aug 5, 2024 ¬∑ 6 min read\nVisualize stock data in Python\nKey parameters for stock data visualization.\nPublished on Sep 28, 2024 ¬∑ 11 min read\nR-squared and MSE are not the only performance metrics for a regression model\nEvaluate regression models with Python and Scikit-Learn.\nPublished on Sep 25, 2024 ¬∑ 7 min read\nData normalization in Python\nNormalize data using 4 different methods.\nPublished on Sep 24, 2024 ¬∑ 5 min read\nInteractive plotting in Python\nVisualize data interactively in Python.\nPublished on Sep 17, 2024 ¬∑ 4 min read\nRegression analysis in R\nGuide to regression analysis with R.\nPublished on Sep 13, 2024 ¬∑ 11 min read\nHandling MultiIndex data in Python\nMulti-indexing with Yahoo Finance dataset.\nPublished on Sep 10, 2024 ¬∑ 6 min read\nMost Important Hyperparameters for Popular ML Algorithms\nTuning your models right.\nPublished on Oct 23, 2024 ¬∑ 9 min read\nCommon preprocessing techniques in Python\nData preprocessing techniques.\nPublished on Oct 23, 2024 ¬∑ 6 min read\nNot sure which ML algorithm to implement? Try SuperLearner\nAggregated prediction model in Python.\nPublished on Oct 20, 2024 ¬∑ 4 min read\n10 Python functions you must know\nWidely used Python functions.\nPublished on Oct 19, 2024 ¬∑ 4 min read\nBuild a machine learning model for sentiment analysis in Python\nAn NLP project on IMDb movie reviews.\nPublished on Oct 17, 2024 ¬∑ 8 min read\nBuild up an end-to-end predictive model with ML algorithm in Python\nPrediction of employee attrition.\nPublished on Oct 7, 2024 ¬∑ 11 min read\nRadar chart ‚Äì a visualization tool for multivariate data\nVisualize effects of multiple variables.\nPublished on Dec 6, 2024 ¬∑ 4 min read\nCompute correlation coefficient between variables in Python\nGuide to correlation measures.\nPublished on Nov 4, 2024 ¬∑ 9 min read\nImplement Bayesian optimization for hyperparameter tuning in Python\nTune hyperparameters efficiently.\nPublished on Nov 1, 2024 ¬∑ 7 min read\nHow to Make ML Models Explainable Using SHAP\nShapley values for model interpretation.\nPublished on Oct 31, 2024 ¬∑ 11 min read\nUnderstand Convolution Neural Network (CNN)\nConceptual explanation of CNN.\nPublished on Oct 30, 2024 ¬∑ 10 min read\nTimeseries prediction with Liquid State Machine Model in Python\nLiquid State Machine for prediction/classification tasks.\nPublished on Oct 30, 2024 ¬∑ 5 min read"
  },
  {
    "objectID": "blog/index.html#medium-articles",
    "href": "blog/index.html#medium-articles",
    "title": "Blog",
    "section": "",
    "text": "Managing Relational Data in Python with SQLite and Pandas\nA tutorial on integrating pandas with SQLite to query, manage, and analyze structured relational data within Python workflows.\nScalable Data Processing with Dask\nTry Dask for large datasets: a flexible Python library for parallel and distributed computing, enabling scalable analysis with pandas-like syntax.\nRobust Regression (Against Outliers) Analysis in Python\nLearn how to use robust estimators like Huber Regressor to handle noisy data and outliers more effectively than standard linear regression.\nMarket Basket Analysis with Python A hands-on tutorial explaining association rule mining using the Apriori algorithm to find itemsets that frequently occur together in transactional data.\n5 Most Common Statistical Distributions Normal distribution and other common statistical concepts explained clearly.\nPublished on Jul 6, 2025 ¬∑ 7 min read\nUnderstand Decision Function in a Classification Model A beginner‚Äôs guide to decision functions using scikit-learn.\nPublished on Jul 5, 2025 ¬∑ 5 min read\nA Brief Introduction to Automated Machine Learning (AutoML) with an Example Quick AutoML demo with a working implementation.\nPublished on Jul 5, 2025 ¬∑ 4 min read\nAn Introduction to the Mixed Effect Model in R Beginner‚Äôs guide to building mixed effect models using R.\nPublished on Jul 4, 2025 ¬∑ 6 min read\nRegularized or Penalized Regression Models Lasso, Ridge, and ElasticNet explained with Python examples.\nPublished on Jul 4, 2025 ¬∑ 9 min read\nMeasuring Personalized Cancer Therapy Response: The Growth Modulation Index (GMI) Compute GMI using Python for personalized cancer therapy response.\nPublished on Apr 30, 2025 ¬∑ 4 min read\nUnderstanding Odds Ratio, Relative risk and Hit Ratio An odd ratio(OR) is a statistical measure of association between two events, for example, exposure and outcome. OR plays a crucial role in‚Ä¶\nSimpson‚Äôs Paradox Be aware of this common mistake in data analysis Published on Jan 7, 2025 ¬∑ 3 min read\nFalse Discovery Rate (FDR), adjusted p-value, and Q-values When you perform many hypothesis tests simultaneously, the chance of observing a false positive (rejecting a true null hypothesis)‚Ä¶ Published on Jan 5, 2025 ¬∑ 3 min read\nUnderstand p-value and confidence interval Understand p-value and confidence interval in an example Published on Jan 4, 2025 ¬∑ 7 min read\nComprehensive Guide to Multiple Testing Corrections Bonferroni, Holm-Bonferroni, FDR, Tukey HSD, and Permutation Tests Explained with Python Examples\nBuild an end-to-end Machine Learning project in Python\nMachine learning has become an integral part of modern software solutions, enabling intelligent features and data-driven decision-making.\nPublished on Jul 31, 2024 ¬∑ 5 min read ¬∑ In Towards Dev\nAnalysing stock data in Python\nA step-by-step guide to understanding time series and applying forecasting methods on Yahoo finance dataset.\nPublished on Sep 5, 2024 ¬∑ 15 min read ¬∑ In Towards Dev\nTopic modeling with Python: An NLP project\nExplore your text data with Python.\nPublished on Aug 23, 2024 ¬∑ 15 min read ¬∑ In Python in Plain English\nOutlier detection and removal in Python\nA beginner‚Äôs guide to outlier detection in static and time-series dataset.\nPublished on Aug 15, 2024 ¬∑ 11 min read ¬∑ In Learning Data\nPlotting data in Python\nA step-by-step guide to exploring data visualization techniques in Python.\nPublished on Aug 9, 2024 ¬∑ 7 min read ¬∑ In Python in Plain English\nDimensionality Reduction using R\nUnderstanding dimensionality reduction technique with an example dataset.\nPublished on Aug 7, 2024 ¬∑ 7 min read ¬∑ In Towards Dev\nA Comprehensive Guide to A/B Testing in Python\nImplementing A/B Testing in an Email Campaign Using Python.\nPublished on Aug 5, 2024 ¬∑ 6 min read\nVisualize stock data in Python\nKey parameters for stock data visualization.\nPublished on Sep 28, 2024 ¬∑ 11 min read\nR-squared and MSE are not the only performance metrics for a regression model\nEvaluate regression models with Python and Scikit-Learn.\nPublished on Sep 25, 2024 ¬∑ 7 min read\nData normalization in Python\nNormalize data using 4 different methods.\nPublished on Sep 24, 2024 ¬∑ 5 min read\nInteractive plotting in Python\nVisualize data interactively in Python.\nPublished on Sep 17, 2024 ¬∑ 4 min read\nRegression analysis in R\nGuide to regression analysis with R.\nPublished on Sep 13, 2024 ¬∑ 11 min read\nHandling MultiIndex data in Python\nMulti-indexing with Yahoo Finance dataset.\nPublished on Sep 10, 2024 ¬∑ 6 min read\nMost Important Hyperparameters for Popular ML Algorithms\nTuning your models right.\nPublished on Oct 23, 2024 ¬∑ 9 min read\nCommon preprocessing techniques in Python\nData preprocessing techniques.\nPublished on Oct 23, 2024 ¬∑ 6 min read\nNot sure which ML algorithm to implement? Try SuperLearner\nAggregated prediction model in Python.\nPublished on Oct 20, 2024 ¬∑ 4 min read\n10 Python functions you must know\nWidely used Python functions.\nPublished on Oct 19, 2024 ¬∑ 4 min read\nBuild a machine learning model for sentiment analysis in Python\nAn NLP project on IMDb movie reviews.\nPublished on Oct 17, 2024 ¬∑ 8 min read\nBuild up an end-to-end predictive model with ML algorithm in Python\nPrediction of employee attrition.\nPublished on Oct 7, 2024 ¬∑ 11 min read\nRadar chart ‚Äì a visualization tool for multivariate data\nVisualize effects of multiple variables.\nPublished on Dec 6, 2024 ¬∑ 4 min read\nCompute correlation coefficient between variables in Python\nGuide to correlation measures.\nPublished on Nov 4, 2024 ¬∑ 9 min read\nImplement Bayesian optimization for hyperparameter tuning in Python\nTune hyperparameters efficiently.\nPublished on Nov 1, 2024 ¬∑ 7 min read\nHow to Make ML Models Explainable Using SHAP\nShapley values for model interpretation.\nPublished on Oct 31, 2024 ¬∑ 11 min read\nUnderstand Convolution Neural Network (CNN)\nConceptual explanation of CNN.\nPublished on Oct 30, 2024 ¬∑ 10 min read\nTimeseries prediction with Liquid State Machine Model in Python\nLiquid State Machine for prediction/classification tasks.\nPublished on Oct 30, 2024 ¬∑ 5 min read"
  },
  {
    "objectID": "posts/welcome/posts_welcome_welcome.html",
    "href": "posts/welcome/posts_welcome_welcome.html",
    "title": "Adding Two Numbers in Python",
    "section": "",
    "text": "This tutorial shows how to add two numbers in Python using a simple function. It‚Äôs perfect for beginners learning basic programming concepts."
  },
  {
    "objectID": "posts/welcome/posts_welcome_welcome.html#introduction",
    "href": "posts/welcome/posts_welcome_welcome.html#introduction",
    "title": "Adding Two Numbers in Python",
    "section": "",
    "text": "This tutorial shows how to add two numbers in Python using a simple function. It‚Äôs perfect for beginners learning basic programming concepts."
  },
  {
    "objectID": "posts/welcome/posts_welcome_welcome.html#python-code",
    "href": "posts/welcome/posts_welcome_welcome.html#python-code",
    "title": "Adding Two Numbers in Python",
    "section": "Python Code",
    "text": "Python Code\nBelow is a Python function that takes two numbers as input and returns their sum.\ndef add_numbers(a, b):\n    return a + b\n\n# Example usage\nnum1 = 10\nnum2 = 20\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}\")\nThe code: 1. Defines a function add_numbers that accepts two parameters, a and b. 2. Returns their sum using a + b. 3. Demonstrates the function with num1 = 10 and num2 = 20, printing the result.\nWhen you run this code, the output is:\nThe sum of 10 and 20 is 30"
  },
  {
    "objectID": "posts/welcome/posts_welcome_welcome.html#try-it-yourself",
    "href": "posts/welcome/posts_welcome_welcome.html#try-it-yourself",
    "title": "Adding Two Numbers in Python",
    "section": "Try It Yourself",
    "text": "Try It Yourself\nCopy the code into your Python environment or modify the numbers to test different inputs. Stay tuned for more Python tutorials!"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog",
    "section": "",
    "text": "‚è± Benchmarking in R: microbenchmark, profvis, and bench ‚Äî with examples\nLearn how to profile and optimize your R code using modern tools.\n\nMore coming soon!"
  },
  {
    "objectID": "posts/index.html#my-blog-posts",
    "href": "posts/index.html#my-blog-posts",
    "title": "Blog",
    "section": "",
    "text": "‚è± Benchmarking in R: microbenchmark, profvis, and bench ‚Äî with examples\nLearn how to profile and optimize your R code using modern tools.\n\nMore coming soon!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Blog Banner"
  },
  {
    "objectID": "index.html#about-this-blog",
    "href": "index.html#about-this-blog",
    "title": "Home",
    "section": "About This Blog",
    "text": "About This Blog\nWelcome to my blog, where I share Python tutorials for beginners and enthusiasts. This site features hands-on examples to help you learn programming concepts. Check out my first tutorial on adding numbers or visit my Medium profile for more content.\nHappy coding!"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Predicting Individual Responses in Phase I Oncology Trials Using Routinely Collected Clinical Biomarkers\nN Bhadra, M Boyd, S Smith, J Espirito, J Trent, C Powell, K Koktavy, 2024\n\n\n\n\n\n\n\nSingle-Cell Patch-Clamp/Proteomics of Human Alzheimer‚Äôs Disease iPSC-Derived Excitatory Neurons Versus Isogenic Wild-Type Controls Suggests Novel Causation and Therapeutic Targets\nS Ghatak, JK Diedrich, M Talantova, N Bhadra, H Scott, M Sharma, Advanced Science (Weinheim, Baden-W√ºrttemberg, Germany), e2400545, 2024\n\n\n\n\n\n\n\nDISTANCE-BASED ANALYSIS OF LONGEVITY-RELATED METABOLOMIC PROFILES\nN Schork, A Podder, N Bhadra, J Don, A Raju, Innovation in Aging, 7, 632‚Äì632, 2023"
  },
  {
    "objectID": "publications.html#selected-publications",
    "href": "publications.html#selected-publications",
    "title": "Publications",
    "section": "",
    "text": "Predicting Individual Responses in Phase I Oncology Trials Using Routinely Collected Clinical Biomarkers\nN Bhadra, M Boyd, S Smith, J Espirito, J Trent, C Powell, K Koktavy, 2024\n\n\n\n\n\n\n\nSingle-Cell Patch-Clamp/Proteomics of Human Alzheimer‚Äôs Disease iPSC-Derived Excitatory Neurons Versus Isogenic Wild-Type Controls Suggests Novel Causation and Therapeutic Targets\nS Ghatak, JK Diedrich, M Talantova, N Bhadra, H Scott, M Sharma, Advanced Science (Weinheim, Baden-W√ºrttemberg, Germany), e2400545, 2024\n\n\n\n\n\n\n\nDISTANCE-BASED ANALYSIS OF LONGEVITY-RELATED METABOLOMIC PROFILES\nN Schork, A Podder, N Bhadra, J Don, A Raju, Innovation in Aging, 7, 632‚Äì632, 2023"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "Welcome to the tutorials section! Below you‚Äôll find notebook-based guides covering Python and R.\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBioinformatics Terminal Command Cheat Sheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMissing Data Imputation in Data Analysis\n\n\n\n\n\n\n\n\nJul 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Compute Execution time in R\n\n\n\n\n\n\n\n\nJul 19, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tutorials/Imputation_in_Python.html",
    "href": "tutorials/Imputation_in_Python.html",
    "title": "Missing Data Imputation in Data Analysis",
    "section": "",
    "text": "Why do we need imputation in the first¬†place?\nMissing value imputation is an important topic in data science. It is a basic method for solving incomplete dataset problems where one or more than one data point is missing. Three types of missingness mechanisms can cause an incomplete dataset. They are missing completely at random (MCAR), missing at random (MAR), and not missing at random (NMAR).\nGenerally, suppose 10‚Äì15% of data points are missing from a dataset. Those data points can be removed from the analysis (although this percentage depends on specific domains) without significantly affecting the results. When it exceeds 15%, one needs to be cautious before removing the data points as it might dramatically affect the conclusion. Interested readers are encouraged to read this review article on missing value imputation.\nImputation is the process of replacing missing data with 1 or more specific values, to allow statistical analysis that includes all participants, not just those with no missing data.\nMissing value imputation is a process in which some statistical or machine learning techniques are implemented to replace these missing data points with substituted values. Statistical methods, such as mean/mode and regression, have been widely used for imputation. Besides, machine learning techniques, such as the k nearest neighbour, artificial neural network, and support vector machine techniques have been employed in several analyses in recent years. There are specific techniques for different domains. For example, here is a review article on missing value imputation techniques in bioinformatics(https://link.springer.com/article/10.1007/s10462-019-09709-4).\nSome popular or widely used methods are: linear regression (LR), least squares (LS), and mean/mode. The mean and mode methods are the simplest imputation methods for imputing numerical and categorical attribute values. Among, ML techniques the most widely method is kNN imputation.\n\n# Import required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.datasets import make_classification\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\n# Generate synthetic data with missing values\ndef create_data():\n    X, y = make_classification(\n        n_samples=500,\n        n_features=10,\n        n_informative=5,\n        n_redundant=3,\n        n_classes=2,\n        weights=[0.7, 0.3],\n        random_state=42\n    )\n\n    # Introduce missing values randomly\n    rng = np.random.default_rng(42)\n    missing_mask = rng.random(X.shape) &lt; 0.1\n    X[missing_mask] = np.nan\n\n    data = pd.DataFrame(X, columns=[f\"Feature_{i}\" for i in range(X.shape[1])])\n    data['Target'] = y\n    return data\n\n# Visualize missing values\ndef visualize_missing(data):\n    plt.figure(figsize=(10, 6))\n    sns.heatmap(data.isnull(), cbar=False, cmap=\"viridis\")\n    plt.title(\"Missing Values Heatmap\")\n    plt.show()\n\n# Generic imputation function\ndef impute_data(data, method='mean'):\n    X = data.drop(columns=['Target'])\n    y = data['Target']\n\n    if method == 'mean':\n        imputer = SimpleImputer(strategy='mean')\n    elif method == 'median':\n        imputer = SimpleImputer(strategy='median')\n    elif method == 'knn':\n        imputer = KNNImputer(n_neighbors=5)\n    elif method == 'iterative':\n        imputer = IterativeImputer(random_state=42)\n    else:\n        raise ValueError(\"Unsupported imputation method\")\n\n    X_imputed = imputer.fit_transform(X)\n    return pd.DataFrame(X_imputed, columns=X.columns), y\n\n# Visualize original and imputed data\ndef visualize_distributions(original, imputed, method_name):\n    for col in original.columns:\n        plt.figure(figsize=(12, 5))\n\n        sns.histplot(original[col].dropna(), kde=True, label=\"Original\", color='blue', stat='density')\n        sns.histplot(imputed[col], kde=True, label=\"Imputed\", color='orange', stat='density')\n\n        plt.title(f\"{method_name} - Distribution Comparison for {col}\")\n        plt.legend()\n        plt.savefig(f\"{method_name}_{col}_distribution_comparison.png\")\n        plt.show()\n\n# Main function to execute full imputation project\ndef main():\n    methods = ['mean', 'median', 'knn', 'iterative']\n    data = create_data()\n    print(\"Original Data with Missing Values:\")\n    print(data.head())\n\n    visualize_missing(data)\n\n    for method in methods:\n        print(f\"\\n--- Using {method} imputation method ---\")\n        imputed_data, target = impute_data(data, method=method)\n        visualize_distributions(data.drop(columns=['Target']), imputed_data, method)\n\nif __name__ == \"__main__\":\n    main()\n\nOriginal Data with Missing Values:\n   Feature_0  Feature_1  Feature_2  Feature_3  Feature_4  Feature_5   \n0   1.268034  -1.938790  -2.657481   0.450603        NaN   0.750109  \\\n1  -1.659509   1.799067  -0.321888   0.283751   1.472452   0.771765   \n2   0.588233  -0.135523   2.659634   0.034027   0.660927  -0.259529   \n3   0.930852   2.858530   3.244368  -0.889241   0.702170  -0.660185   \n4  -0.752371   2.277090   2.454236  -0.116229   1.958278   1.670844   \n\n   Feature_6  Feature_7  Feature_8  Feature_9  Target  \n0  -1.319657  -1.869816   2.045422   0.839415       1  \n1   0.104738        NaN   0.454337  -0.575068       0  \n2   1.920629        NaN  -0.864698  -3.041237       1  \n3   1.067658   0.955301   0.364498  -0.403121       0  \n4   0.637865   0.214713  -1.401239  -2.124745       0  \n\n\n\n\n\n\n\n\n\n\n--- Using mean imputation method ---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--- Using median imputation method ---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--- Using knn imputation method ---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--- Using iterative imputation method ---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe choice of method should be informed by the pattern of missingness, data type, and downstream modeling goals.\n\nReferences\nResources for Further Reading: - Little, R. J. A., & Rubin, D. B. (2019). Statistical Analysis with Missing Data. https://onlinelibrary.wiley.com/doi/book/10.1002/9781119482260#aboutBook-pane\n\nvan Buuren, S. (2018). Flexible Imputation of Missing Data. https://stefvanbuuren.name/fimd/\nYulei He et al.¬†(2021). Multiple Imputation of Missing Data in Practice. https://www.routledge.com/Multiple-Imputation-of-Missing-Data-in-Practice-Basic-Theory-and-Analysis-Strategies/He-Zhang-Hsu/p/book/9781032136899?srsltid=AfmBOorj6QGt4FuhRCHrlex0LRB7ob6DeWEi8LfhP97-NodAlRToRsYn\nscikit-learn documentation: https://scikit-learn.org/stable/modules/impute.html"
  },
  {
    "objectID": "tutorials/bioinformatics_commands.html",
    "href": "tutorials/bioinformatics_commands.html",
    "title": "Bioinformatics Terminal Command Cheat Sheet",
    "section": "",
    "text": "Searching with grep\n\ngrep \"ACTG\" &lt;filename&gt; ‚Äì Find lines containing ACTG\n\ngrep -v \"N\" &lt;filename&gt; ‚Äì Exclude lines with ‚ÄúN‚Äù\n\ngrep -c \"rs\" &lt;filename&gt; ‚Äì Count lines with ‚Äúrs‚Äù\n\ngrep -w \"chr1\" &lt;filename&gt; ‚Äì Match whole word ‚Äúchr1‚Äù\n\nzgrep \"chr1\" &lt;filename&gt;.vcf.gz ‚Äì Grep inside gzipped VCF file\n\n\n\nColumn Operations with awk\n\nawk '{print $1}' &lt;filename&gt; ‚Äì Print 1st column\n\nawk '$5 &gt; 0.05' &lt;filename&gt; ‚Äì Filter rows with 5th column &gt; 0.05\n\nawk 'NR&gt;1' &lt;filename&gt; ‚Äì Skip header (first row)\n\nawk 'BEGIN{FS=\"\\t\"} {print $2,$3}' &lt;filename&gt; ‚Äì Tab-delimited input\n\n\n\nFinding Files with find\n\nfind . -name \"*.vcf\" ‚Äì Find all .vcf files\n\nfind /data -type f -size +1G ‚Äì Files &gt;1GB in /data\n\nfind . -mtime -1 ‚Äì Modified in last 24 hrs\n\nfind . -exec grep \"rs123\" {} \\; ‚Äì Search ‚Äúrs123‚Äù in all files\n\n\n\nText Processing Essentials\n\ncut -f1,3 &lt;filename&gt; ‚Äì Cut fields 1 and 3\n\nsort &lt;filename&gt; ‚Äì Sort lines\n\nsort -k2,2n &lt;filename&gt; ‚Äì Sort by 2nd column numerically\n\nuniq -c &lt;filename&gt; ‚Äì Count unique lines\n\npaste &lt;file1&gt; &lt;file2&gt; ‚Äì Merge files side by side\n\nwc -l &lt;filename&gt; ‚Äì Count lines in a file\n\n\n\nGenomic Data Tools\n\nsamtools view &lt;file&gt;.bam ‚Äì View alignment data\n\nbcftools view &lt;file&gt;.vcf.gz ‚Äì View VCF data\n\nbedtools intersect -a &lt;a.bed&gt; -b &lt;b.bed&gt; ‚Äì Genomic region overlap\n\nplink --bfile &lt;data&gt; --assoc ‚Äì Run basic association test"
  }
]